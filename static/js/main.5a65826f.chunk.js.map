{"version":3,"sources":["contexts/input/initialValue.ts","contexts/input/InputContext.tsx","contexts/input/InputProvider.tsx","contexts/input/useInput.ts","components/elements/Input.tsx","services/browser/computeLink.ts","services/browser/openTab.ts","components/elements/SearchButton.tsx","services/browser/openNewPage.ts","components/modules/ButtonsList.tsx","services/getButtonsList/index.ts","components/elements/LinksSwitcher.tsx","components/modules/ScreenSwitcher.tsx","components/layouts/AppLayout.tsx","services/getSwitchers.ts","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["initialValue","value","update","reset","InputContext","createContext","InputProvider","children","useState","setValue","Provider","updated","useInput","useContext","useMemo","Input","autoFocus","onChange","e","target","onBlur","setTimeout","focus","computeLink","url","input","undefined","replace","INPUT_FLAG","openTab","window","open","CST","SearchButton","label","span","isDocButton","hGutter","getSpan","isSmallScreen","Math","round","xs","sm","type","onClick","link","openNewPage","style","width","minWidth","height","maxHeight","borderRadius","whiteSpace","fontWeight","elts","docs","engines","ButtonsList","vGutter","forDocs","list","setList","eltsPerLine","setEltsPerLine","useEffect","DOCS_LIST","SEARCH_ENGINES_LIST","gutter","map","idx","name","toString","LinksSwitcher","isSelected","margin","padding","flex","ScreenSwitcher","status","updateStatus","checked","AppLayout","isForDocs","setForDocs","isScreenpadMode","setScreenpadMode","switchers","SWITCHERS","styles","container","boxSizing","display","flexDirection","justifyContent","alignItems","backgroundColor","inputSection","textAlign","buttonsList","rules","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a65826f.chunk.js","sourcesContent":["export const initialValue: {\r\n    value: string;\r\n    update: Function;\r\n    reset: Function;\r\n} = {\r\n    value: \"\",\r\n    update: () => {},\r\n    reset: () => {},\r\n};","import { createContext } from \"react\";\r\nimport { initialValue } from \"./initialValue\";\r\nimport { InputContextType } from \"./types\";\r\n\r\nexport const InputContext = createContext<InputContextType>(initialValue);","import { useState, FC } from \"react\";\r\nimport { InputContext } from \"./InputContext\";\r\nimport { initialValue } from \"./initialValue\";\r\n\r\nexport const InputProvider: FC = ({ children }) => {\r\n    const [value, setValue] = useState<string>(initialValue.value);\r\n    const update: Function = (updated: string): void => setValue(updated);\r\n    const reset: Function = (): void => setValue(initialValue.value);\r\n\r\n    return (\r\n        <InputContext.Provider value={{ value, update, reset }}>\r\n            { children }\r\n        </InputContext.Provider>\r\n    );\r\n};","import { useContext, useMemo } from \"react\";\r\nimport { InputContext } from \"./InputContext\";\r\n\r\nexport const useInput = () => {\r\n    const {value, update, reset} = useContext(InputContext);\r\n    const output = useMemo(\r\n        () => ({\r\n            value, \r\n            update, \r\n            reset,\r\n        }),\r\n        [reset, update, value]\r\n    );\r\n    return output;\r\n};","import { FC, ReactElement } from \"react\";\r\nimport { Input as AntdInput } from \"antd\";\r\nimport { useInput } from \"contexts/input\";\r\n\r\nexport const Input: FC = (): ReactElement => {\r\n    const { value, update } = useInput();\r\n    return (\r\n        <AntdInput\r\n            autoFocus\r\n            value={value}\r\n            onChange={(e) => update(e.target.value)}\r\n            //FIXME: Find a better way to get focus\r\n            onBlur={(e) => setTimeout(()=> e.target.focus(), 500)}\r\n        />\r\n    );\r\n};","import INPUT_FLAG from \"_config/INPUT_FLAG.json\";\r\n\r\nexport const computeLink = (\r\n    url: string, \r\n    input: string|undefined = undefined\r\n): string => input === undefined ? url : url.replace(INPUT_FLAG, input);","export const openTab = (url: string): Window|null => window.open(url, \"_blank\");","import { FC, ReactElement, MouseEventHandler, CSSProperties } from \"react\";\r\nimport { Button, Col } from \"antd\";\r\nimport { openNewPage } from \"services/browser\";\r\nimport { useInput } from \"contexts/input\";\r\n\r\nconst CST = {\r\n    eltsPerLineOnSmallScreens: 2,\r\n};\r\n\r\nexport const SearchButton: FC<{\r\n    label: string;\r\n    url: string;\r\n    span: number;\r\n    isDocButton: boolean;\r\n    hGutter: number;\r\n}> = ({ label, url, span, isDocButton, hGutter }): ReactElement => {\r\n    const { value, reset } = useInput();\r\n    const handleClickOnButton: MouseEventHandler<HTMLButtonElement> = () => {\r\n        openNewPage(url, isDocButton ? undefined : value);\r\n        reset();\r\n    };\r\n    const getSpan = (isSmallScreen: boolean = false): {span: number} => ({\r\n        span: isSmallScreen ? Math.round(hGutter / CST.eltsPerLineOnSmallScreens)\r\n        : span\r\n    });\r\n    const btnStyle: CSSProperties = {\r\n        width: \"100%\",\r\n        minWidth: \"160px\",\r\n        height: \"20vh\",\r\n        maxHeight: \"140px\",\r\n        borderRadius: \"5px\",\r\n        whiteSpace: \"pre-line\",\r\n        fontWeight: \"bold\",\r\n    };\r\n\r\n    return (\r\n        <Col xs={getSpan(true)} sm={getSpan()}>\r\n            <Button type=\"default\" onClick={handleClickOnButton} style={btnStyle}>\r\n                {label}\r\n            </Button>\r\n        </Col>\r\n    );\r\n};","import { computeLink } from \"./computeLink\";\r\nimport { openTab } from \"./openTab\";\r\n\r\nexport const openNewPage: Function = (\r\n    url: string,\r\n    input: string|undefined = undefined\r\n): void => {\r\n    const link: string = computeLink(url, input);\r\n    openTab(link);\r\n};","import { FC, ReactElement, useEffect, useState } from \"react\";\r\nimport { Row } from \"antd\";\r\nimport { getButtonsList, ButtonData } from \"services/getButtonsList\";\r\nimport { SearchButton } from \"components/elements/SearchButton\";\r\n\r\nconst CST = {\r\n    elts: {\r\n        docs: 3,\r\n        engines: 4,\r\n    },\r\n};\r\n\r\nexport const ButtonsList: FC<{\r\n    hGutter?: number;\r\n    vGutter?: number;\r\n    forDocs?: boolean;\r\n}> = ({ hGutter = 24, vGutter = 24, forDocs = false }): ReactElement => {\r\n    const [list, setList] = useState<ButtonData[]>([]);\r\n    const [eltsPerLine, setEltsPerLine] = useState<number>(0);\r\n\r\n    useEffect(\r\n        () => {\r\n            setList(getButtonsList(forDocs));\r\n            setEltsPerLine(CST.elts[forDocs ? \"docs\" : \"engines\"]);\r\n        }, [forDocs]\r\n    );\r\n\r\n    return (\r\n        <Row gutter={[hGutter, vGutter]}>\r\n            {\r\n                list.map(\r\n                    ({name, url}, idx) => (\r\n                        <SearchButton\r\n                            key={idx.toString()}\r\n                            label={name}\r\n                            url={url}\r\n                            span={Math.round(hGutter / eltsPerLine)}\r\n                            isDocButton={forDocs}\r\n                            hGutter={hGutter}\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </Row>\r\n    );\r\n};","import DOCS_LIST from \"_config/buttons_lists/DOCS_LIST.json\";\r\nimport SEARCH_ENGINES_LIST from \"_config/buttons_lists/SEARCH_ENGINES_LIST.json\";\r\n\r\nexport interface ButtonData {\r\n    name: string;\r\n    url: string;\r\n};\r\n\r\nexport const getButtonsList: Function = (\r\n    isForDocs: boolean\r\n): ButtonData[] => isForDocs ? [...DOCS_LIST] : [...SEARCH_ENGINES_LIST];","import { Button } from \"antd\";\r\nimport { CSSProperties, FC, MouseEventHandler } from \"react\";\r\n\r\nexport const LinksSwitcher: FC<{\r\n    label: string;\r\n    onClick: MouseEventHandler<HTMLElement>;\r\n    isSelected: boolean;\r\n}> = ({ label, onClick, isSelected }) => {\r\n    const style: CSSProperties = {\r\n        margin: \"0 3%\",\r\n        padding: \"0\",\r\n        flex: \"1 0 auto\",\r\n    };\r\n\r\n    return (\r\n        <Button \r\n            style={style} \r\n            onClick={onClick} \r\n            type={isSelected ? \"primary\":\"default\"}\r\n        >\r\n            { label }\r\n        </Button>\r\n    );\r\n};","import { FC, ReactElement } from \"react\"\r\nimport { Switch } from \"antd\";\r\nimport { SwitchChangeEventHandler } from \"antd/lib/switch\";\r\n\r\nexport const ScreenSwitcher: FC<{\r\n    status: boolean;\r\n    updateStatus: Function\r\n}> = ({ status, updateStatus }): ReactElement => {\r\n    const handleChange: SwitchChangeEventHandler = () => updateStatus(!status);\r\n    return (\r\n        <article>\r\n            <Switch checked={status} onChange={handleChange} /><br/>\r\n            <span>{status ? \"Screenpad\":\"Desktop\"} mode</span>\r\n        </article>\r\n    );\r\n};","import { FC, ReactElement, useState, CSSProperties } from \"react\";\r\nimport { Input } from \"components/elements/Input\";\r\nimport { ButtonsList } from \"components/modules/ButtonsList\";\r\nimport { LinksSwitcher } from \"components/elements/LinksSwitcher\";\r\nimport { ScreenSwitcher } from \"components/modules/ScreenSwitcher\";\r\nimport { getSwitchers } from \"services/getSwitchers\";\r\n\r\nexport const AppLayout: FC = (): ReactElement => {\r\n\tconst [isForDocs, setForDocs] = useState<boolean>(false);\r\n\tconst [isScreenpadMode, setScreenpadMode] = useState<boolean>(true);\r\n\tconst switchers = getSwitchers();\r\n\tconst styles: {[key: string]: CSSProperties} = {\r\n\t\tcontainer: {\r\n\t\t\tboxSizing: \"border-box\",\r\n\t\t\twidth: \"100vw\",\r\n\t\t\tmargin: \"0\",\r\n\t\t\tpadding: \"40px\",\r\n\t\t\tminWidth: \"320px\",\r\n\t\t\theight: \"100vh\",\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tflexDirection: isScreenpadMode ? \"row\":\"column\",\r\n\t\t\tjustifyContent: \"space-around\",\r\n\t\t\talignItems: \"center\",\r\n\t\t\tbackgroundColor: \"#7cabd0\",\r\n\t\t},\r\n\t\tswitchers: {\r\n\t\t\tmargin: \"2vh 0\",\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tjustifyContent: \"center\"\r\n\t\t},\r\n\t\tinputSection: {\r\n\t\t\twidth: \"30%\",\r\n\t\t\ttextAlign: \"center\",\r\n\t\t\tmargin: isScreenpadMode ? \"10px\": \"auto\"\r\n\t\t},\r\n\t\tbuttonsList: {\r\n\t\t\twidth: \"95%\"\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<main style={styles.container}>\r\n\t\t\t<section style={styles.inputSection}>\r\n\t\t\t\t<Input />\r\n\t\t\t\t<section style={styles.switchers}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitchers.map(\r\n\t\t\t\t\t\t\t({label, rules}) => (\r\n\t\t\t\t\t\t\t\t<LinksSwitcher \r\n\t\t\t\t\t\t\t\t\tkey={label}\r\n\t\t\t\t\t\t\t\t\tlabel={label}\r\n\t\t\t\t\t\t\t\t\tisSelected={isForDocs === rules}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setForDocs(rules)}\r\n\t\t\t\t\t\t\t\t/>\t\t\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</section>\r\n\t\t\t\t<ScreenSwitcher\r\n\t\t\t\t\tstatus={isScreenpadMode}\r\n\t\t\t\t\tupdateStatus={setScreenpadMode}\r\n\t\t\t\t/>\r\n\t\t\t</section>\r\n\t\t\t<section style={styles.buttonsList}>\r\n\t\t\t\t<ButtonsList forDocs={isForDocs} />\r\n\t\t\t</section>\r\n\t\t</main>\r\n\t);\r\n};","import SWITCHERS from \"_config/SWITCHERS.json\";\r\ntype Switcher = typeof SWITCHERS[0];\r\nexport const getSwitchers = (): Switcher[] => [...SWITCHERS];","import { FC, ReactElement } from \"react\";\nimport { InputProvider } from \"contexts/input\";\nimport \"antd/dist/antd.css\";\n\nimport { AppLayout } from \"components/layouts/AppLayout\";\n\nexport const App: FC = (): ReactElement => {\n\treturn (\n\t\t<InputProvider>\n\t\t\t<AppLayout/>\n\t\t</InputProvider>\n\t);\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}